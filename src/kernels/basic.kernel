#pragma OPENCL EXTENSION cl_khr_fp64 : enable

typedef struct LinearBVHNodeTag {
  float boundsMin[3];
  float boundsMax[3];

  union {
    int primitivesOffset;
    int secondChildOffset;
  };

  ushort primitiveCount;
  uchar axis;
  uchar pad[1];
} LinearBVHNode;

typedef struct PrimitiveTag {
  float vertexA[3];
  float vertexB[3];
  float vertexC[3];
  float normalA[3];
  float normalB[3];
  float normalC[3];
} Primitive;

typedef struct RayTag {
  float4 origin;
  float4 direction;
} Ray;

typedef struct RayPayloadTag {
  float t;
  float u;
  float v;
} RayPayload;

__global float* getBounds(int dirIsNeg, __global float* boundsMin, __global float* boundsMax) {
  return (dirIsNeg == 0) ? boundsMin : boundsMax;
}

bool intersectTriangle(RayPayload* rayPayload, Ray ray, Primitive primitive) {
  const float EPSILON = 0.0000001;
  float4 vertexA = (float4)(primitive.vertexA[0], primitive.vertexA[1], primitive.vertexA[2], 1);
  float4 vertexB = (float4)(primitive.vertexB[0], primitive.vertexB[1], primitive.vertexB[2], 1);
  float4 vertexC = (float4)(primitive.vertexC[0], primitive.vertexC[1], primitive.vertexC[2], 1);

  float4 v0v1 = vertexB - vertexA;
  float4 v0v2 = vertexC - vertexA;
  float4 pvec = cross(ray.direction, v0v2);
  float det = dot(v0v1, pvec);

  if (fabs(det) < EPSILON) {
    return false;
  }

  float invDet = 1 / det;

  float4 tvec = ray.origin - vertexA;
  float u = dot(tvec,pvec) * invDet;
  if (u < 0 || u > 1) {
    return false;
  }

  float4 qvec = cross(tvec, v0v1);
  float v = dot(ray.direction, qvec) * invDet;
  if (v < 0 || u + v > 1) {
    return false;
  }

  rayPayload->t = dot(v0v2, qvec) * invDet;
  rayPayload->u = u;
  rayPayload->v = v;

  return true;
}

bool intersectBounds(Ray ray, float4 invDir, int dirIsNeg[3], __global float boundsMin[3], __global float boundsMax[3]) {
  float tMin = (getBounds(dirIsNeg[0], boundsMin, boundsMax)[0] - ray.origin.x) * invDir.x;
  float tMax = (getBounds(1 - dirIsNeg[0], boundsMin, boundsMax)[0] - ray.origin.x) * invDir.x;
  float tyMin = (getBounds(dirIsNeg[1], boundsMin, boundsMax)[1] - ray.origin.y) * invDir.y;
  float tyMax = (getBounds(1 - dirIsNeg[1], boundsMin, boundsMax)[1] - ray.origin.y) * invDir.y;

  if (tMin > tyMax || tyMin > tMax) return false;
  if (tyMin > tMin) tMin = tyMin;
  if (tyMax < tMax) tMax = tyMax;

  float tzMin = (getBounds(dirIsNeg[2], boundsMin, boundsMax)[2] - ray.origin.z) * invDir.z;
  float tzMax = (getBounds(1 - dirIsNeg[2], boundsMin, boundsMax)[2] - ray.origin.z) * invDir.z;

  if (tMin > tzMax || tzMin > tMax) return false;
  if (tzMin > tMin) tMin = tzMin;
  if (tzMax < tMax) tMax = tzMax;
  return (tMax > 0);
}

bool intersect(RayPayload* rayPayload, Ray ray, __global LinearBVHNode* nodes, __global Primitive* primitives) {
  bool hit = false;
  float4 invDir = (float4)(1.0 / ray.direction.x, 1.0 / ray.direction.y, 1.0 / ray.direction.z, 0);
  int dirIsNeg[3] = {invDir.x < 0, invDir.y < 0, invDir.z < 0};

  int toVisitOffset = 0, currentNodeIndex = 0;
  int nodesToVisit[64];
  while (true) {
    __global const LinearBVHNode* node = &nodes[currentNodeIndex];

    if (intersectBounds(ray, invDir, dirIsNeg, node->boundsMin, node->boundsMax)) {
      if (node->primitiveCount > 0) {
        for (int i = 0; i < node->primitiveCount; i++) {
          if (intersectTriangle(rayPayload, ray, primitives[node->primitivesOffset])) {
            hit = true;
          }
        }
        if (toVisitOffset == 0) {
          break;
        }
        currentNodeIndex = nodesToVisit[--toVisitOffset];
      }
      else {
        if (dirIsNeg[node->axis]) {
          nodesToVisit[toVisitOffset++] = currentNodeIndex + 1;
          currentNodeIndex = node->secondChildOffset;
        } else {
          nodesToVisit[toVisitOffset++] = node->secondChildOffset;
          currentNodeIndex = currentNodeIndex + 1;
        }
      }
    }
    else {
      if (toVisitOffset == 0) {
        break;
      }
      currentNodeIndex = nodesToVisit[--toVisitOffset];
    }
  }

  return hit;
}

__kernel void linearKernel(__global LinearBVHNode* linearNodes, __global Primitive* primitives, __global float* output, uint currentBlock, uint width, uint height, uint depth) {
  int blockIDY = get_global_id(1) + ((currentBlock / (width / get_global_size(0))) * get_global_size(1));
  int blockIDX = get_global_id(0) + ((currentBlock % (width / get_global_size(0))) * get_global_size(0));
  int blockID = (blockIDY * width + blockIDX) * depth;

  if (blockIDX >= width || blockIDY >= height) {
    return;
  }

  RayPayload rayPayload;

  Ray ray = {
    .origin = (float4)(((float)blockIDX / width) - 0.5f, ((float)blockIDY / height) - 0.5f, -2, 1),
    .direction = (float4)(0, 0, 1, 0)
  };

  if (intersect(&rayPayload, ray, linearNodes, primitives)) {
    output[blockID + 0] = rayPayload.u * 255;
    output[blockID + 1] = rayPayload.v * 255;
    output[blockID + 2] = (1.0 - rayPayload.u - rayPayload.v) * 255;
  }
  else {
    output[blockID + 0] = 0;
    output[blockID + 1] = 0;
    output[blockID + 2] = 0;
  }
}

__kernel void tileKernel(__global LinearBVHNode* linearNodes, __global Primitive* primitives, __global float* output, uint currentBlock, uint width, uint height, uint depth) {
  int localBlockID = get_group_id(1) * get_num_groups(0) + get_group_id(0);
  int localIDY = get_local_id(1) + ((localBlockID / (get_global_size(0) / get_local_size(0))) * get_local_size(1));
  int localIDX = get_local_id(0) + ((localBlockID % (get_global_size(0) / get_local_size(0))) * get_local_size(0));
  int blockIDY = localIDY + ((currentBlock / (width / get_global_size(0))) * get_global_size(1));
  int blockIDX = localIDX + ((currentBlock % (width / get_global_size(0))) * get_global_size(0));
  int blockID = (blockIDY * width + blockIDX) * depth;

  if (blockIDX >= width || blockIDY >= height) {
    return;
  }

  RayPayload rayPayload;

  Ray ray = {
    .origin = (float4)(((float)blockIDX / width) - 0.5f, ((float)blockIDY / height) - 0.5f, -2, 1),
    .direction = (float4)(0, 0, 1, 0)
  };

  if (intersect(&rayPayload, ray, linearNodes, primitives)) {
    output[blockID + 0] = rayPayload.u * 255;
    output[blockID + 1] = rayPayload.v * 255;
    output[blockID + 2] = (1.0 - rayPayload.u - rayPayload.v) * 255;
  }
  else {
    output[blockID + 0] = 0;
    output[blockID + 1] = 0;
    output[blockID + 2] = 0;
  }
}